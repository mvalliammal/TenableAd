# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad   

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class InlineResponse20025(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'ad_object_id': 'float',
        'ad_object_type': 'str',
        'directory_id': 'float',
        'type': 'str',
        'event_provider_id': 'str',
        'event_provider_uid': 'Object',
        'event_provider_date': 'datetime',
        '_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'ad_object_id': 'adObjectId',
        'ad_object_type': 'adObjectType',
        'directory_id': 'directoryId',
        'type': 'type',
        'event_provider_id': 'eventProviderId',
        'event_provider_uid': 'eventProviderUid',
        'event_provider_date': 'eventProviderDate',
        '_date': 'date'
    }

    def __init__(self, id=None, ad_object_id=None, ad_object_type=None, directory_id=None, type=None, event_provider_id=None, event_provider_uid=None, event_provider_date=None, _date=None):   
        """InlineResponse20025 - a model defined in Swagger"""   
        self._id = None
        self._ad_object_id = None
        self._ad_object_type = None
        self._directory_id = None
        self._type = None
        self._event_provider_id = None
        self._event_provider_uid = None
        self._event_provider_date = None
        self.__date = None
        self.discriminator = None
        self.id = id
        self.ad_object_id = ad_object_id
        self.ad_object_type = ad_object_type
        self.directory_id = directory_id
        self.type = type
        self.event_provider_id = event_provider_id
        self.event_provider_uid = event_provider_uid
        self.event_provider_date = event_provider_date
        self._date = _date

    @property
    def id(self):
        """Gets the id of this InlineResponse20025.   


        :return: The id of this InlineResponse20025.   
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20025.


        :param id: The id of this InlineResponse20025.   
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")   

        self._id = id

    @property
    def ad_object_id(self):
        """Gets the ad_object_id of this InlineResponse20025.   


        :return: The ad_object_id of this InlineResponse20025.   
        :rtype: float
        """
        return self._ad_object_id

    @ad_object_id.setter
    def ad_object_id(self, ad_object_id):
        """Sets the ad_object_id of this InlineResponse20025.


        :param ad_object_id: The ad_object_id of this InlineResponse20025.   
        :type: float
        """
        if ad_object_id is None:
            raise ValueError("Invalid value for `ad_object_id`, must not be `None`")   

        self._ad_object_id = ad_object_id

    @property
    def ad_object_type(self):
        """Gets the ad_object_type of this InlineResponse20025.   


        :return: The ad_object_type of this InlineResponse20025.   
        :rtype: str
        """
        return self._ad_object_type

    @ad_object_type.setter
    def ad_object_type(self, ad_object_type):
        """Sets the ad_object_type of this InlineResponse20025.


        :param ad_object_type: The ad_object_type of this InlineResponse20025.   
        :type: str
        """
        if ad_object_type is None:
            raise ValueError("Invalid value for `ad_object_type`, must not be `None`")   
        allowed_values = ["LDAP", "SYSVOL"]   
        if ad_object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ad_object_type` ({0}), must be one of {1}"   
                .format(ad_object_type, allowed_values)
            )

        self._ad_object_type = ad_object_type

    @property
    def directory_id(self):
        """Gets the directory_id of this InlineResponse20025.   


        :return: The directory_id of this InlineResponse20025.   
        :rtype: float
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this InlineResponse20025.


        :param directory_id: The directory_id of this InlineResponse20025.   
        :type: float
        """
        if directory_id is None:
            raise ValueError("Invalid value for `directory_id`, must not be `None`")   

        self._directory_id = directory_id

    @property
    def type(self):
        """Gets the type of this InlineResponse20025.   


        :return: The type of this InlineResponse20025.   
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20025.


        :param type: The type of this InlineResponse20025.   
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")   

        self._type = type

    @property
    def event_provider_id(self):
        """Gets the event_provider_id of this InlineResponse20025.   


        :return: The event_provider_id of this InlineResponse20025.   
        :rtype: str
        """
        return self._event_provider_id

    @event_provider_id.setter
    def event_provider_id(self, event_provider_id):
        """Sets the event_provider_id of this InlineResponse20025.


        :param event_provider_id: The event_provider_id of this InlineResponse20025.   
        :type: str
        """
        if event_provider_id is None:
            raise ValueError("Invalid value for `event_provider_id`, must not be `None`")   

        self._event_provider_id = event_provider_id

    @property
    def event_provider_uid(self):
        """Gets the event_provider_uid of this InlineResponse20025.   


        :return: The event_provider_uid of this InlineResponse20025.   
        :rtype: Object
        """
        return self._event_provider_uid

    @event_provider_uid.setter
    def event_provider_uid(self, event_provider_uid):
        """Sets the event_provider_uid of this InlineResponse20025.


        :param event_provider_uid: The event_provider_uid of this InlineResponse20025.   
        :type: Object
        """
        if event_provider_uid is None:
            raise ValueError("Invalid value for `event_provider_uid`, must not be `None`")   

        self._event_provider_uid = event_provider_uid

    @property
    def event_provider_date(self):
        """Gets the event_provider_date of this InlineResponse20025.   


        :return: The event_provider_date of this InlineResponse20025.   
        :rtype: datetime
        """
        return self._event_provider_date

    @event_provider_date.setter
    def event_provider_date(self, event_provider_date):
        """Sets the event_provider_date of this InlineResponse20025.


        :param event_provider_date: The event_provider_date of this InlineResponse20025.   
        :type: datetime
        """
        if event_provider_date is None:
            raise ValueError("Invalid value for `event_provider_date`, must not be `None`")   

        self._event_provider_date = event_provider_date

    @property
    def _date(self):
        """Gets the _date of this InlineResponse20025.   


        :return: The _date of this InlineResponse20025.   
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse20025.


        :param _date: The _date of this InlineResponse20025.   
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")   

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20025, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20025):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
