# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class ApiAttacksBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'directory_id': 'float',
        'attack_type_id': 'float',
        'dc': 'str',
        '_date': 'datetime',
        'vector_attributes': 'list[ApiattacksVectorAttributes]',
        'source': 'ApiattacksSource',
        'target': 'ApiattacksSource'
    }

    attribute_map = {
        'directory_id': 'directoryId',
        'attack_type_id': 'attackTypeId',
        'dc': 'dc',
        '_date': 'date',
        'vector_attributes': 'vectorAttributes',
        'source': 'source',
        'target': 'target'
    }

    def __init__(self, directory_id=None, attack_type_id=None, dc=None, _date=None, vector_attributes=None, source=None, target=None):
        """ApiAttacksBody - a model defined in Swagger"""
        self._directory_id = None
        self._attack_type_id = None
        self._dc = None
        self.__date = None
        self._vector_attributes = None
        self._source = None
        self._target = None
        self.discriminator = None
        self.directory_id = directory_id
        self.attack_type_id = attack_type_id
        self.dc = dc
        self._date = _date
        self.vector_attributes = vector_attributes
        self.source = source
        self.target = target

    @property
    def directory_id(self):
        """Gets the directory_id of this ApiAttacksBody.


        :return: The directory_id of this ApiAttacksBody.
        :rtype: float
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this ApiAttacksBody.


        :param directory_id: The directory_id of this ApiAttacksBody.
        :type: float
        """
        if directory_id is None:
            raise ValueError("Invalid value for `directory_id`, must not be `None`")

        self._directory_id = directory_id

    @property
    def attack_type_id(self):
        """Gets the attack_type_id of this ApiAttacksBody.


        :return: The attack_type_id of this ApiAttacksBody.
        :rtype: float
        """
        return self._attack_type_id

    @attack_type_id.setter
    def attack_type_id(self, attack_type_id):
        """Sets the attack_type_id of this ApiAttacksBody.


        :param attack_type_id: The attack_type_id of this ApiAttacksBody.
        :type: float
        """
        if attack_type_id is None:
            raise ValueError("Invalid value for `attack_type_id`, must not be `None`")

        self._attack_type_id = attack_type_id

    @property
    def dc(self):
        """Gets the dc of this ApiAttacksBody.


        :return: The dc of this ApiAttacksBody.
        :rtype: str
        """
        return self._dc

    @dc.setter
    def dc(self, dc):
        """Sets the dc of this ApiAttacksBody.


        :param dc: The dc of this ApiAttacksBody.
        :type: str
        """
        if dc is None:
            raise ValueError("Invalid value for `dc`, must not be `None`")

        self._dc = dc

    @property
    def _date(self):
        """Gets the _date of this ApiAttacksBody.


        :return: The _date of this ApiAttacksBody.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ApiAttacksBody.


        :param _date: The _date of this ApiAttacksBody.
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def vector_attributes(self):
        """Gets the vector_attributes of this ApiAttacksBody.


        :return: The vector_attributes of this ApiAttacksBody.
        :rtype: list[ApiattacksVectorAttributes]
        """
        return self._vector_attributes

    @vector_attributes.setter
    def vector_attributes(self, vector_attributes):
        """Sets the vector_attributes of this ApiAttacksBody.


        :param vector_attributes: The vector_attributes of this ApiAttacksBody.
        :type: list[ApiattacksVectorAttributes]
        """
        if vector_attributes is None:
            raise ValueError("Invalid value for `vector_attributes`, must not be `None`")

        self._vector_attributes = vector_attributes

    @property
    def source(self):
        """Gets the source of this ApiAttacksBody.


        :return: The source of this ApiAttacksBody.
        :rtype: ApiattacksSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ApiAttacksBody.


        :param source: The source of this ApiAttacksBody.
        :type: ApiattacksSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def target(self):
        """Gets the target of this ApiAttacksBody.


        :return: The target of this ApiAttacksBody.
        :rtype: ApiattacksSource
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ApiAttacksBody.


        :param target: The target of this ApiAttacksBody.
        :type: ApiattacksSource
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiAttacksBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiAttacksBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
