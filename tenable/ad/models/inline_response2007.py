# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad   

    OpenAPI spec version: production
    

"""

import pprint
import re   

import six

class InlineResponse2007(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_registration': 'bool',
        'keep_audit_log': 'bool',
        'log_retention_period': 'float',
        'smtp_server_address': 'str',
        'smtp_server_port': 'float',
        'smtp_account': 'str',
        'smtp_account_password': 'str',
        'smtp_use_start_tls': 'bool',
        'tls': 'bool',
        'email_sender': 'str',
        'default_role_ids': 'list[int]',
        'default_profile_id': 'int',
        'internal_certificate': 'str'
    }

    attribute_map = {
        'user_registration': 'userRegistration',
        'keep_audit_log': 'keepAuditLog',
        'log_retention_period': 'logRetentionPeriod',
        'smtp_server_address': 'smtpServerAddress',
        'smtp_server_port': 'smtpServerPort',
        'smtp_account': 'smtpAccount',
        'smtp_account_password': 'smtpAccountPassword',
        'smtp_use_start_tls': 'smtpUseStartTLS',
        'tls': 'tls',
        'email_sender': 'emailSender',
        'default_role_ids': 'defaultRoleIds',
        'default_profile_id': 'defaultProfileId',
        'internal_certificate': 'internalCertificate'
    }

    def __init__(self, user_registration=None, keep_audit_log=None, log_retention_period=None, smtp_server_address=None, smtp_server_port=None, smtp_account=None, smtp_account_password=None, smtp_use_start_tls=None, tls=None, email_sender=None, default_role_ids=None, default_profile_id=None, internal_certificate=None):   
        """InlineResponse2007 - a model defined in Swagger"""   
        self._user_registration = None
        self._keep_audit_log = None
        self._log_retention_period = None
        self._smtp_server_address = None
        self._smtp_server_port = None
        self._smtp_account = None
        self._smtp_account_password = None
        self._smtp_use_start_tls = None
        self._tls = None
        self._email_sender = None
        self._default_role_ids = None
        self._default_profile_id = None
        self._internal_certificate = None
        self.discriminator = None
        self.user_registration = user_registration
        self.keep_audit_log = keep_audit_log
        self.log_retention_period = log_retention_period
        self.smtp_server_address = smtp_server_address
        self.smtp_server_port = smtp_server_port
        self.smtp_account = smtp_account
        self.smtp_account_password = smtp_account_password
        self.smtp_use_start_tls = smtp_use_start_tls
        self.tls = tls
        self.email_sender = email_sender
        self.default_role_ids = default_role_ids
        self.default_profile_id = default_profile_id
        self.internal_certificate = internal_certificate

    @property
    def user_registration(self):
        """Gets the user_registration of this InlineResponse2007.   


        :return: The user_registration of this InlineResponse2007.   
        :rtype: bool
        """
        return self._user_registration

    @user_registration.setter
    def user_registration(self, user_registration):
        """Sets the user_registration of this InlineResponse2007.


        :param user_registration: The user_registration of this InlineResponse2007.   
        :type: bool
        """
        if user_registration is None:
            raise ValueError("Invalid value for `user_registration`, must not be `None`")   

        self._user_registration = user_registration

    @property
    def keep_audit_log(self):
        """Gets the keep_audit_log of this InlineResponse2007.   


        :return: The keep_audit_log of this InlineResponse2007.   
        :rtype: bool
        """
        return self._keep_audit_log

    @keep_audit_log.setter
    def keep_audit_log(self, keep_audit_log):
        """Sets the keep_audit_log of this InlineResponse2007.


        :param keep_audit_log: The keep_audit_log of this InlineResponse2007.   
        :type: bool
        """
        if keep_audit_log is None:
            raise ValueError("Invalid value for `keep_audit_log`, must not be `None`")   

        self._keep_audit_log = keep_audit_log

    @property
    def log_retention_period(self):
        """Gets the log_retention_period of this InlineResponse2007.   


        :return: The log_retention_period of this InlineResponse2007.   
        :rtype: float
        """
        return self._log_retention_period

    @log_retention_period.setter
    def log_retention_period(self, log_retention_period):
        """Sets the log_retention_period of this InlineResponse2007.


        :param log_retention_period: The log_retention_period of this InlineResponse2007.   
        :type: float
        """
        if log_retention_period is None:
            raise ValueError("Invalid value for `log_retention_period`, must not be `None`")   

        self._log_retention_period = log_retention_period

    @property
    def smtp_server_address(self):
        """Gets the smtp_server_address of this InlineResponse2007.   


        :return: The smtp_server_address of this InlineResponse2007.   
        :rtype: str
        """
        return self._smtp_server_address

    @smtp_server_address.setter
    def smtp_server_address(self, smtp_server_address):
        """Sets the smtp_server_address of this InlineResponse2007.


        :param smtp_server_address: The smtp_server_address of this InlineResponse2007.   
        :type: str
        """
        if smtp_server_address is None:
            raise ValueError("Invalid value for `smtp_server_address`, must not be `None`")   

        self._smtp_server_address = smtp_server_address

    @property
    def smtp_server_port(self):
        """Gets the smtp_server_port of this InlineResponse2007.   


        :return: The smtp_server_port of this InlineResponse2007.   
        :rtype: float
        """
        return self._smtp_server_port

    @smtp_server_port.setter
    def smtp_server_port(self, smtp_server_port):
        """Sets the smtp_server_port of this InlineResponse2007.


        :param smtp_server_port: The smtp_server_port of this InlineResponse2007.   
        :type: float
        """
        if smtp_server_port is None:
            raise ValueError("Invalid value for `smtp_server_port`, must not be `None`")   

        self._smtp_server_port = smtp_server_port

    @property
    def smtp_account(self):
        """Gets the smtp_account of this InlineResponse2007.   


        :return: The smtp_account of this InlineResponse2007.   
        :rtype: str
        """
        return self._smtp_account

    @smtp_account.setter
    def smtp_account(self, smtp_account):
        """Sets the smtp_account of this InlineResponse2007.


        :param smtp_account: The smtp_account of this InlineResponse2007.   
        :type: str
        """
        if smtp_account is None:
            raise ValueError("Invalid value for `smtp_account`, must not be `None`")   

        self._smtp_account = smtp_account

    @property
    def smtp_account_password(self):
        """Gets the smtp_account_password of this InlineResponse2007.   


        :return: The smtp_account_password of this InlineResponse2007.   
        :rtype: str
        """
        return self._smtp_account_password

    @smtp_account_password.setter
    def smtp_account_password(self, smtp_account_password):
        """Sets the smtp_account_password of this InlineResponse2007.


        :param smtp_account_password: The smtp_account_password of this InlineResponse2007.   
        :type: str
        """
        if smtp_account_password is None:
            raise ValueError("Invalid value for `smtp_account_password`, must not be `None`")   

        self._smtp_account_password = smtp_account_password

    @property
    def smtp_use_start_tls(self):
        """Gets the smtp_use_start_tls of this InlineResponse2007.   


        :return: The smtp_use_start_tls of this InlineResponse2007.   
        :rtype: bool
        """
        return self._smtp_use_start_tls

    @smtp_use_start_tls.setter
    def smtp_use_start_tls(self, smtp_use_start_tls):
        """Sets the smtp_use_start_tls of this InlineResponse2007.


        :param smtp_use_start_tls: The smtp_use_start_tls of this InlineResponse2007.   
        :type: bool
        """
        if smtp_use_start_tls is None:
            raise ValueError("Invalid value for `smtp_use_start_tls`, must not be `None`")   

        self._smtp_use_start_tls = smtp_use_start_tls

    @property
    def tls(self):
        """Gets the tls of this InlineResponse2007.   


        :return: The tls of this InlineResponse2007.   
        :rtype: bool
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this InlineResponse2007.


        :param tls: The tls of this InlineResponse2007.   
        :type: bool
        """
        if tls is None:
            raise ValueError("Invalid value for `tls`, must not be `None`")   

        self._tls = tls

    @property
    def email_sender(self):
        """Gets the email_sender of this InlineResponse2007.   


        :return: The email_sender of this InlineResponse2007.   
        :rtype: str
        """
        return self._email_sender

    @email_sender.setter
    def email_sender(self, email_sender):
        """Sets the email_sender of this InlineResponse2007.


        :param email_sender: The email_sender of this InlineResponse2007.   
        :type: str
        """
        if email_sender is None:
            raise ValueError("Invalid value for `email_sender`, must not be `None`")   

        self._email_sender = email_sender

    @property
    def default_role_ids(self):
        """Gets the default_role_ids of this InlineResponse2007.   


        :return: The default_role_ids of this InlineResponse2007.   
        :rtype: list[int]
        """
        return self._default_role_ids

    @default_role_ids.setter
    def default_role_ids(self, default_role_ids):
        """Sets the default_role_ids of this InlineResponse2007.


        :param default_role_ids: The default_role_ids of this InlineResponse2007.   
        :type: list[int]
        """
        if default_role_ids is None:
            raise ValueError("Invalid value for `default_role_ids`, must not be `None`")   

        self._default_role_ids = default_role_ids

    @property
    def default_profile_id(self):
        """Gets the default_profile_id of this InlineResponse2007.   


        :return: The default_profile_id of this InlineResponse2007.   
        :rtype: int
        """
        return self._default_profile_id

    @default_profile_id.setter
    def default_profile_id(self, default_profile_id):
        """Sets the default_profile_id of this InlineResponse2007.


        :param default_profile_id: The default_profile_id of this InlineResponse2007.   
        :type: int
        """
        if default_profile_id is None:
            raise ValueError("Invalid value for `default_profile_id`, must not be `None`")   

        self._default_profile_id = default_profile_id

    @property
    def internal_certificate(self):
        """Gets the internal_certificate of this InlineResponse2007.   


        :return: The internal_certificate of this InlineResponse2007.   
        :rtype: str
        """
        return self._internal_certificate

    @internal_certificate.setter
    def internal_certificate(self, internal_certificate):
        """Sets the internal_certificate of this InlineResponse2007.


        :param internal_certificate: The internal_certificate of this InlineResponse2007.   
        :type: str
        """
        if internal_certificate is None:
            raise ValueError("Invalid value for `internal_certificate`, must not be `None`")   

        self._internal_certificate = internal_certificate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2007, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
