# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad   

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class AdObjectIdDeviancesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_start': 'datetime',
        'date_end': 'datetime',
        'show_ignored': 'bool'
    }

    attribute_map = {
        'date_start': 'dateStart',
        'date_end': 'dateEnd',
        'show_ignored': 'showIgnored'
    }

    def __init__(self, date_start=None, date_end=None, show_ignored=None):   
        """AdObjectIdDeviancesBody - a model defined in Swagger"""   
        self._date_start = None
        self._date_end = None
        self._show_ignored = None
        self.discriminator = None
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        self.show_ignored = show_ignored

    @property
    def date_start(self):
        """Gets the date_start of this AdObjectIdDeviancesBody.   


        :return: The date_start of this AdObjectIdDeviancesBody.   
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this AdObjectIdDeviancesBody.


        :param date_start: The date_start of this AdObjectIdDeviancesBody.   
        :type: datetime
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this AdObjectIdDeviancesBody.   


        :return: The date_end of this AdObjectIdDeviancesBody.   
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this AdObjectIdDeviancesBody.


        :param date_end: The date_end of this AdObjectIdDeviancesBody.   
        :type: datetime
        """

        self._date_end = date_end

    @property
    def show_ignored(self):
        """Gets the show_ignored of this AdObjectIdDeviancesBody.   


        :return: The show_ignored of this AdObjectIdDeviancesBody.   
        :rtype: bool
        """
        return self._show_ignored

    @show_ignored.setter
    def show_ignored(self, show_ignored):
        """Sets the show_ignored of this AdObjectIdDeviancesBody.


        :param show_ignored: The show_ignored of this AdObjectIdDeviancesBody.   
        :type: bool
        """
        if show_ignored is None:
            raise ValueError("Invalid value for `show_ignored`, must not be `None`")   

        self._show_ignored = show_ignored

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdObjectIdDeviancesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdObjectIdDeviancesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
