# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re   

import six

class ApirolesPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_name': 'str',
        'action': 'str',
        'entity_ids': 'list[float]',
        'dynamic_id': 'str'
    }

    attribute_map = {
        'entity_name': 'entityName',
        'action': 'action',
        'entity_ids': 'entityIds',
        'dynamic_id': 'dynamicId'
    }

    def __init__(self, entity_name=None, action=None, entity_ids=None, dynamic_id=None):
        """ApirolesPermissions - a model defined in Swagger"""
        self._entity_name = None
        self._action = None
        self._entity_ids = None
        self._dynamic_id = None
        self.discriminator = None
        self.entity_name = entity_name
        self.action = action
        self.entity_ids = entity_ids
        if dynamic_id is not None:
            self.dynamic_id = dynamic_id

    @property
    def entity_name(self):
        """Gets the entity_name of this ApirolesPermissions.


        :return: The entity_name of this ApirolesPermissions.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this ApirolesPermissions.


        :param entity_name: The entity_name of this ApirolesPermissions.
        :type: str
        """
        if entity_name is None:
            raise ValueError("Invalid value for `entity_name`, must not be `None`")

        self._entity_name = entity_name

    @property
    def action(self):
        """Gets the action of this ApirolesPermissions.


        :return: The action of this ApirolesPermissions.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ApirolesPermissions.


        :param action: The action of this ApirolesPermissions.
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def entity_ids(self):
        """Gets the entity_ids of this ApirolesPermissions.


        :return: The entity_ids of this ApirolesPermissions.
        :rtype: list[float]
        """
        return self._entity_ids

    @entity_ids.setter
    def entity_ids(self, entity_ids):
        """Sets the entity_ids of this ApirolesPermissions.


        :param entity_ids: The entity_ids of this ApirolesPermissions.
        :type: list[float]
        """
        if entity_ids is None:
            raise ValueError("Invalid value for `entity_ids`, must not be `None`")

        self._entity_ids = entity_ids

    @property
    def dynamic_id(self):
        """Gets the dynamic_id of this ApirolesPermissions.


        :return: The dynamic_id of this ApirolesPermissions.
        :rtype: str
        """
        return self._dynamic_id

    @dynamic_id.setter
    def dynamic_id(self, dynamic_id):
        """Sets the dynamic_id of this ApirolesPermissions.


        :param dynamic_id: The dynamic_id of this ApirolesPermissions.
        :type: str
        """
        allowed_values = ["self-user-id", ""]
        if dynamic_id not in allowed_values:
            raise ValueError(
                "Invalid value for `dynamic_id` ({0}), must be one of {1}"
                .format(dynamic_id, allowed_values)
            )

        self._dynamic_id = dynamic_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApirolesPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApirolesPermissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
