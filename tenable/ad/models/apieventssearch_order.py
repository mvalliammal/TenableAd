# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class ApieventssearchOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column': 'str',
        'direction': 'str'
    }

    attribute_map = {
        'column': 'column',
        'direction': 'direction'
    }

    def __init__(self, column=None, direction=None):
        """ApieventssearchOrder - a model defined in Swagger"""
        self._column = None
        self._direction = None
        self.discriminator = None
        if column is not None:
            self.column = column
        if direction is not None:
            self.direction = direction

    @property
    def column(self):
        """Gets the column of this ApieventssearchOrder.


        :return: The column of this ApieventssearchOrder.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this ApieventssearchOrder.


        :param column: The column of this ApieventssearchOrder.
        :type: str
        """
        allowed_values = ["eventProviderId"]
        if column not in allowed_values:
            raise ValueError(
                "Invalid value for `column` ({0}), must be one of {1}"
                .format(column, allowed_values)
            )

        self._column = column

    @property
    def direction(self):
        """Gets the direction of this ApieventssearchOrder.


        :return: The direction of this ApieventssearchOrder.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ApieventssearchOrder.


        :param direction: The direction of this ApieventssearchOrder.
        :type: str
        """
        allowed_values = ["asc", "desc"]
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApieventssearchOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApieventssearchOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
