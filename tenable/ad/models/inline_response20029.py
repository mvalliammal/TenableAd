# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class InlineResponse20029(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_name': 'str',
        'max_active_user_count': 'int',
        'current_active_user_count': 'int',
        'expiration_date_utc': 'datetime',
        'in_app_eula': 'bool',
        'type': 'str',
        'features': 'list[str]'
    }

    attribute_map = {
        'customer_name': 'customerName',
        'max_active_user_count': 'maxActiveUserCount',
        'current_active_user_count': 'currentActiveUserCount',
        'expiration_date_utc': 'expirationDateUTC',
        'in_app_eula': 'inAppEula',
        'type': 'type',
        'features': 'features'
    }

    def __init__(self, customer_name=None, max_active_user_count=None, current_active_user_count=None, expiration_date_utc=None, in_app_eula=None, type=None, features=None):
        """InlineResponse20029 - a model defined in Swagger"""
        self._customer_name = None
        self._max_active_user_count = None
        self._current_active_user_count = None
        self._expiration_date_utc = None
        self._in_app_eula = None
        self._type = None
        self._features = None
        self.discriminator = None
        self.customer_name = customer_name
        self.max_active_user_count = max_active_user_count
        if current_active_user_count is not None:
            self.current_active_user_count = current_active_user_count
        self.expiration_date_utc = expiration_date_utc
        self.in_app_eula = in_app_eula
        self.type = type
        self.features = features

    @property
    def customer_name(self):
        """Gets the customer_name of this InlineResponse20029.


        :return: The customer_name of this InlineResponse20029.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this InlineResponse20029.


        :param customer_name: The customer_name of this InlineResponse20029.
        :type: str
        """
        if customer_name is None:
            raise ValueError("Invalid value for `customer_name`, must not be `None`")

        self._customer_name = customer_name

    @property
    def max_active_user_count(self):
        """Gets the max_active_user_count of this InlineResponse20029.


        :return: The max_active_user_count of this InlineResponse20029.
        :rtype: int
        """
        return self._max_active_user_count

    @max_active_user_count.setter
    def max_active_user_count(self, max_active_user_count):
        """Sets the max_active_user_count of this InlineResponse20029.


        :param max_active_user_count: The max_active_user_count of this InlineResponse20029.
        :type: int
        """
        if max_active_user_count is None:
            raise ValueError("Invalid value for `max_active_user_count`, must not be `None`")

        self._max_active_user_count = max_active_user_count

    @property
    def current_active_user_count(self):
        """Gets the current_active_user_count of this InlineResponse20029.


        :return: The current_active_user_count of this InlineResponse20029.
        :rtype: int
        """
        return self._current_active_user_count

    @current_active_user_count.setter
    def current_active_user_count(self, current_active_user_count):
        """Sets the current_active_user_count of this InlineResponse20029.


        :param current_active_user_count: The current_active_user_count of this InlineResponse20029.
        :type: int
        """

        self._current_active_user_count = current_active_user_count

    @property
    def expiration_date_utc(self):
        """Gets the expiration_date_utc of this InlineResponse20029.


        :return: The expiration_date_utc of this InlineResponse20029.
        :rtype: datetime
        """
        return self._expiration_date_utc

    @expiration_date_utc.setter
    def expiration_date_utc(self, expiration_date_utc):
        """Sets the expiration_date_utc of this InlineResponse20029.


        :param expiration_date_utc: The expiration_date_utc of this InlineResponse20029.
        :type: datetime
        """
        if expiration_date_utc is None:
            raise ValueError("Invalid value for `expiration_date_utc`, must not be `None`")

        self._expiration_date_utc = expiration_date_utc

    @property
    def in_app_eula(self):
        """Gets the in_app_eula of this InlineResponse20029.


        :return: The in_app_eula of this InlineResponse20029.
        :rtype: bool
        """
        return self._in_app_eula

    @in_app_eula.setter
    def in_app_eula(self, in_app_eula):
        """Sets the in_app_eula of this InlineResponse20029.


        :param in_app_eula: The in_app_eula of this InlineResponse20029.
        :type: bool
        """
        if in_app_eula is None:
            raise ValueError("Invalid value for `in_app_eula`, must not be `None`")

        self._in_app_eula = in_app_eula

    @property
    def type(self):
        """Gets the type of this InlineResponse20029.


        :return: The type of this InlineResponse20029.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20029.


        :param type: The type of this InlineResponse20029.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def features(self):
        """Gets the features of this InlineResponse20029.


        :return: The features of this InlineResponse20029.
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this InlineResponse20029.


        :param features: The features of this InlineResponse20029.
        :type: list[str]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")

        self._features = features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20029, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20029):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
