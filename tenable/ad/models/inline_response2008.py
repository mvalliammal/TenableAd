# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class InlineResponse2008(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'name': 'str',
        'yara_rules': 'str',
        'description': 'str',
        'workload_quota': 'float',
        'mitre_attack_description': 'str',
        'criticity': 'str',
        'resources': 'list[ApiattacktypesResources]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'yara_rules': 'yaraRules',
        'description': 'description',
        'workload_quota': 'workloadQuota',
        'mitre_attack_description': 'mitreAttackDescription',
        'criticity': 'criticity',
        'resources': 'resources'
    }

    def __init__(self, id=None, name=None, yara_rules=None, description=None, workload_quota=None, mitre_attack_description=None, criticity=None, resources=None):
        """InlineResponse2008 - a model defined in Swagger"""
        self._id = None
        self._name = None
        self._yara_rules = None
        self._description = None
        self._workload_quota = None
        self._mitre_attack_description = None
        self._criticity = None
        self._resources = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.yara_rules = yara_rules
        self.description = description
        self.workload_quota = workload_quota
        self.mitre_attack_description = mitre_attack_description
        self.criticity = criticity
        self.resources = resources

    @property
    def id(self):
        """Gets the id of this InlineResponse2008.


        :return: The id of this InlineResponse2008.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2008.


        :param id: The id of this InlineResponse2008.
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse2008.


        :return: The name of this InlineResponse2008.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2008.


        :param name: The name of this InlineResponse2008.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def yara_rules(self):
        """Gets the yara_rules of this InlineResponse2008.


        :return: The yara_rules of this InlineResponse2008.
        :rtype: str
        """
        return self._yara_rules

    @yara_rules.setter
    def yara_rules(self, yara_rules):
        """Sets the yara_rules of this InlineResponse2008.


        :param yara_rules: The yara_rules of this InlineResponse2008.
        :type: str
        """
        if yara_rules is None:
            raise ValueError("Invalid value for `yara_rules`, must not be `None`")

        self._yara_rules = yara_rules

    @property
    def description(self):
        """Gets the description of this InlineResponse2008.


        :return: The description of this InlineResponse2008.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse2008.


        :param description: The description of this InlineResponse2008.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def workload_quota(self):
        """Gets the workload_quota of this InlineResponse2008.


        :return: The workload_quota of this InlineResponse2008.
        :rtype: float
        """
        return self._workload_quota

    @workload_quota.setter
    def workload_quota(self, workload_quota):
        """Sets the workload_quota of this InlineResponse2008.


        :param workload_quota: The workload_quota of this InlineResponse2008.
        :type: float
        """
        if workload_quota is None:
            raise ValueError("Invalid value for `workload_quota`, must not be `None`")

        self._workload_quota = workload_quota

    @property
    def mitre_attack_description(self):
        """Gets the mitre_attack_description of this InlineResponse2008.


        :return: The mitre_attack_description of this InlineResponse2008.
        :rtype: str
        """
        return self._mitre_attack_description

    @mitre_attack_description.setter
    def mitre_attack_description(self, mitre_attack_description):
        """Sets the mitre_attack_description of this InlineResponse2008.


        :param mitre_attack_description: The mitre_attack_description of this InlineResponse2008.
        :type: str
        """
        if mitre_attack_description is None:
            raise ValueError("Invalid value for `mitre_attack_description`, must not be `None`")

        self._mitre_attack_description = mitre_attack_description

    @property
    def criticity(self):
        """Gets the criticity of this InlineResponse2008.


        :return: The criticity of this InlineResponse2008.
        :rtype: str
        """
        return self._criticity

    @criticity.setter
    def criticity(self, criticity):
        """Sets the criticity of this InlineResponse2008.


        :param criticity: The criticity of this InlineResponse2008.
        :type: str
        """
        if criticity is None:
            raise ValueError("Invalid value for `criticity`, must not be `None`")

        self._criticity = criticity

    @property
    def resources(self):
        """Gets the resources of this InlineResponse2008.


        :return: The resources of this InlineResponse2008.
        :rtype: list[ApiattacktypesResources]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this InlineResponse2008.


        :param resources: The resources of this InlineResponse2008.
        :type: list[ApiattacktypesResources]
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
