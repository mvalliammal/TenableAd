# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class InlineResponse2002(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'directory_id': 'float',
        'object_id': 'str',
        'type': 'str',
        'object_attributes': 'list[ApiprofilesprofileIdcheckerscheckerIdadobjectssearchObjectAttributes]',
        'reasons': 'list[float]'
    }

    attribute_map = {
        'id': 'id',
        'directory_id': 'directoryId',
        'object_id': 'objectId',
        'type': 'type',
        'object_attributes': 'objectAttributes',
        'reasons': 'reasons'
    }

    def __init__(self, id=None, directory_id=None, object_id=None, type=None, object_attributes=None, reasons=None):
        """InlineResponse2002 - a model defined in Swagger"""
        self._id = None
        self._directory_id = None
        self._object_id = None
        self._type = None
        self._object_attributes = None
        self._reasons = None
        self.discriminator = None
        self.id = id
        self.directory_id = directory_id
        self.object_id = object_id
        self.type = type
        self.object_attributes = object_attributes
        self.reasons = reasons

    @property
    def id(self):
        """Gets the id of this InlineResponse2002.


        :return: The id of this InlineResponse2002.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2002.


        :param id: The id of this InlineResponse2002.
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def directory_id(self):
        """Gets the directory_id of this InlineResponse2002.


        :return: The directory_id of this InlineResponse2002.
        :rtype: float
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this InlineResponse2002.


        :param directory_id: The directory_id of this InlineResponse2002.
        :type: float
        """
        if directory_id is None:
            raise ValueError("Invalid value for `directory_id`, must not be `None`")

        self._directory_id = directory_id

    @property
    def object_id(self):
        """Gets the object_id of this InlineResponse2002.


        :return: The object_id of this InlineResponse2002.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this InlineResponse2002.


        :param object_id: The object_id of this InlineResponse2002.
        :type: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def type(self):
        """Gets the type of this InlineResponse2002.


        :return: The type of this InlineResponse2002.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2002.


        :param type: The type of this InlineResponse2002.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        allowed_values = ["LDAP", "SYSVOL"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def object_attributes(self):
        """Gets the object_attributes of this InlineResponse2002.


        :return: The object_attributes of this InlineResponse2002.
        :rtype: list[ApiprofilesprofileIdcheckerscheckerIdadobjectssearchObjectAttributes]
        """
        return self._object_attributes

    @object_attributes.setter
    def object_attributes(self, object_attributes):
        """Sets the object_attributes of this InlineResponse2002.


        :param object_attributes: The object_attributes of this InlineResponse2002.
        :type: list[ApiprofilesprofileIdcheckerscheckerIdadobjectssearchObjectAttributes]
        """
        if object_attributes is None:
            raise ValueError("Invalid value for `object_attributes`, must not be `None`")

        self._object_attributes = object_attributes

    @property
    def reasons(self):
        """Gets the reasons of this InlineResponse2002.


        :return: The reasons of this InlineResponse2002.
        :rtype: list[float]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this InlineResponse2002.


        :param reasons: The reasons of this InlineResponse2002.
        :type: list[float]
        """
        if reasons is None:
            raise ValueError("Invalid value for `reasons`, must not be `None`")

        self._reasons = reasons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
