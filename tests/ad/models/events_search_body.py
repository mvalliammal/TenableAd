# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class EventsSearchBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expression': 'object',
        'order': 'ApieventssearchOrder',
        'profile_id': 'int',
        'directory_ids': 'list[int]',
        'date_start': 'datetime',
        'date_end': 'datetime'
    }

    attribute_map = {
        'expression': 'expression',
        'order': 'order',
        'profile_id': 'profileId',
        'directory_ids': 'directoryIds',
        'date_start': 'dateStart',
        'date_end': 'dateEnd'
    }

    def __init__(self, expression=None, order=None, profile_id=None, directory_ids=None, date_start=None, date_end=None):
        """EventsSearchBody - a model defined in Swagger"""
        self._expression = None
        self._order = None
        self._profile_id = None
        self._directory_ids = None
        self._date_start = None
        self._date_end = None
        self.discriminator = None
        self.expression = expression
        if order is not None:
            self.order = order
        self.profile_id = profile_id
        self.directory_ids = directory_ids
        self.date_start = date_start
        self.date_end = date_end

    @property
    def expression(self):
        """Gets the expression of this EventsSearchBody.


        :return: The expression of this EventsSearchBody.
        :rtype: object
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this EventsSearchBody.


        :param expression: The expression of this EventsSearchBody.
        :type: object
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def order(self):
        """Gets the order of this EventsSearchBody.


        :return: The order of this EventsSearchBody.
        :rtype: ApieventssearchOrder
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this EventsSearchBody.


        :param order: The order of this EventsSearchBody.
        :type: ApieventssearchOrder
        """

        self._order = order

    @property
    def profile_id(self):
        """Gets the profile_id of this EventsSearchBody.


        :return: The profile_id of this EventsSearchBody.
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this EventsSearchBody.


        :param profile_id: The profile_id of this EventsSearchBody.
        :type: int
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")

        self._profile_id = profile_id

    @property
    def directory_ids(self):
        """Gets the directory_ids of this EventsSearchBody.


        :return: The directory_ids of this EventsSearchBody.
        :rtype: list[int]
        """
        return self._directory_ids

    @directory_ids.setter
    def directory_ids(self, directory_ids):
        """Sets the directory_ids of this EventsSearchBody.


        :param directory_ids: The directory_ids of this EventsSearchBody.
        :type: list[int]
        """
        if directory_ids is None:
            raise ValueError("Invalid value for `directory_ids`, must not be `None`")

        self._directory_ids = directory_ids

    @property
    def date_start(self):
        """Gets the date_start of this EventsSearchBody.


        :return: The date_start of this EventsSearchBody.
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this EventsSearchBody.


        :param date_start: The date_start of this EventsSearchBody.
        :type: datetime
        """
        if date_start is None:
            raise ValueError("Invalid value for `date_start`, must not be `None`")

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this EventsSearchBody.


        :return: The date_end of this EventsSearchBody.
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this EventsSearchBody.


        :param date_end: The date_end of this EventsSearchBody.
        :type: datetime
        """
        if date_end is None:
            raise ValueError("Invalid value for `date_end`, must not be `None`")

        self._date_end = date_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventsSearchBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsSearchBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
