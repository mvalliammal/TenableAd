# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad   

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class EmailnotifiersIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'criticity_threshold': 'int',
        'directories': 'list[int]',
        'description': 'str',
        'checkers': 'list[int]',
        'attack_types': 'list[int]',
        'profiles': 'list[int]',
        'input_type': 'str'
    }

    attribute_map = {
        'address': 'address',
        'criticity_threshold': 'criticityThreshold',
        'directories': 'directories',
        'description': 'description',
        'checkers': 'checkers',
        'attack_types': 'attackTypes',
        'profiles': 'profiles',
        'input_type': 'inputType'
    }

    def __init__(self, address=None, criticity_threshold=None, directories=None, description=None, checkers=None, attack_types=None, profiles=None, input_type=None):   
        """EmailnotifiersIdBody - a model defined in Swagger"""   
        self._address = None
        self._criticity_threshold = None
        self._directories = None
        self._description = None
        self._checkers = None
        self._attack_types = None
        self._profiles = None
        self._input_type = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if criticity_threshold is not None:
            self.criticity_threshold = criticity_threshold
        if directories is not None:
            self.directories = directories
        if description is not None:
            self.description = description
        if checkers is not None:
            self.checkers = checkers
        if attack_types is not None:
            self.attack_types = attack_types
        if profiles is not None:
            self.profiles = profiles
        if input_type is not None:
            self.input_type = input_type

    @property
    def address(self):
        """Gets the address of this EmailnotifiersIdBody.   


        :return: The address of this EmailnotifiersIdBody.   
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this EmailnotifiersIdBody.


        :param address: The address of this EmailnotifiersIdBody.   
        :type: str
        """

        self._address = address

    @property
    def criticity_threshold(self):
        """Gets the criticity_threshold of this EmailnotifiersIdBody.   


        :return: The criticity_threshold of this EmailnotifiersIdBody.   
        :rtype: int
        """
        return self._criticity_threshold

    @criticity_threshold.setter
    def criticity_threshold(self, criticity_threshold):
        """Sets the criticity_threshold of this EmailnotifiersIdBody.


        :param criticity_threshold: The criticity_threshold of this EmailnotifiersIdBody.   
        :type: int
        """

        self._criticity_threshold = criticity_threshold

    @property
    def directories(self):
        """Gets the directories of this EmailnotifiersIdBody.   


        :return: The directories of this EmailnotifiersIdBody.   
        :rtype: list[int]
        """
        return self._directories

    @directories.setter
    def directories(self, directories):
        """Sets the directories of this EmailnotifiersIdBody.


        :param directories: The directories of this EmailnotifiersIdBody.   
        :type: list[int]
        """

        self._directories = directories

    @property
    def description(self):
        """Gets the description of this EmailnotifiersIdBody.   


        :return: The description of this EmailnotifiersIdBody.   
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EmailnotifiersIdBody.


        :param description: The description of this EmailnotifiersIdBody.   
        :type: str
        """

        self._description = description

    @property
    def checkers(self):
        """Gets the checkers of this EmailnotifiersIdBody.   


        :return: The checkers of this EmailnotifiersIdBody.   
        :rtype: list[int]
        """
        return self._checkers

    @checkers.setter
    def checkers(self, checkers):
        """Sets the checkers of this EmailnotifiersIdBody.


        :param checkers: The checkers of this EmailnotifiersIdBody.   
        :type: list[int]
        """

        self._checkers = checkers

    @property
    def attack_types(self):
        """Gets the attack_types of this EmailnotifiersIdBody.   


        :return: The attack_types of this EmailnotifiersIdBody.   
        :rtype: list[int]
        """
        return self._attack_types

    @attack_types.setter
    def attack_types(self, attack_types):
        """Sets the attack_types of this EmailnotifiersIdBody.


        :param attack_types: The attack_types of this EmailnotifiersIdBody.   
        :type: list[int]
        """

        self._attack_types = attack_types

    @property
    def profiles(self):
        """Gets the profiles of this EmailnotifiersIdBody.   


        :return: The profiles of this EmailnotifiersIdBody.   
        :rtype: list[int]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this EmailnotifiersIdBody.


        :param profiles: The profiles of this EmailnotifiersIdBody.   
        :type: list[int]
        """

        self._profiles = profiles

    @property
    def input_type(self):
        """Gets the input_type of this EmailnotifiersIdBody.   


        :return: The input_type of this EmailnotifiersIdBody.   
        :rtype: str
        """
        return self._input_type

    @input_type.setter
    def input_type(self, input_type):
        """Sets the input_type of this EmailnotifiersIdBody.


        :param input_type: The input_type of this EmailnotifiersIdBody.   
        :type: str
        """

        self._input_type = input_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailnotifiersIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailnotifiersIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
