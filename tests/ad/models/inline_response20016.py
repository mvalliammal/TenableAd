# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class InlineResponse20016(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'codename': 'str',
        'category_id': 'int',
        'remediation_cost': 'int',
        'name': 'str',
        'description': 'str',
        'exec_summary': 'str',
        'vulnerability_detail': 'ApicheckersVulnerabilityDetail',
        'attacker_known_tools': 'list[ApicheckersAttackerKnownTools]',
        'resources': 'list[ApicheckersResources]',
        'recommendation': 'ApicheckersRecommendation'
    }

    attribute_map = {
        'id': 'id',
        'codename': 'codename',
        'category_id': 'categoryId',
        'remediation_cost': 'remediationCost',
        'name': 'name',
        'description': 'description',
        'exec_summary': 'execSummary',
        'vulnerability_detail': 'vulnerabilityDetail',
        'attacker_known_tools': 'attackerKnownTools',
        'resources': 'resources',
        'recommendation': 'recommendation'
    }

    def __init__(self, id=None, codename=None, category_id=None, remediation_cost=None, name=None, description=None, exec_summary=None, vulnerability_detail=None, attacker_known_tools=None, resources=None, recommendation=None):
        """InlineResponse20016 - a model defined in Swagger"""
        self._id = None
        self._codename = None
        self._category_id = None
        self._remediation_cost = None
        self._name = None
        self._description = None
        self._exec_summary = None
        self._vulnerability_detail = None
        self._attacker_known_tools = None
        self._resources = None
        self._recommendation = None
        self.discriminator = None
        self.id = id
        self.codename = codename
        self.category_id = category_id
        self.remediation_cost = remediation_cost
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if exec_summary is not None:
            self.exec_summary = exec_summary
        if vulnerability_detail is not None:
            self.vulnerability_detail = vulnerability_detail
        if attacker_known_tools is not None:
            self.attacker_known_tools = attacker_known_tools
        if resources is not None:
            self.resources = resources
        if recommendation is not None:
            self.recommendation = recommendation

    @property
    def id(self):
        """Gets the id of this InlineResponse20016.


        :return: The id of this InlineResponse20016.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20016.


        :param id: The id of this InlineResponse20016.
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def codename(self):
        """Gets the codename of this InlineResponse20016.


        :return: The codename of this InlineResponse20016.
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename):
        """Sets the codename of this InlineResponse20016.


        :param codename: The codename of this InlineResponse20016.
        :type: str
        """
        if codename is None:
            raise ValueError("Invalid value for `codename`, must not be `None`")

        self._codename = codename

    @property
    def category_id(self):
        """Gets the category_id of this InlineResponse20016.


        :return: The category_id of this InlineResponse20016.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this InlineResponse20016.


        :param category_id: The category_id of this InlineResponse20016.
        :type: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def remediation_cost(self):
        """Gets the remediation_cost of this InlineResponse20016.


        :return: The remediation_cost of this InlineResponse20016.
        :rtype: int
        """
        return self._remediation_cost

    @remediation_cost.setter
    def remediation_cost(self, remediation_cost):
        """Sets the remediation_cost of this InlineResponse20016.


        :param remediation_cost: The remediation_cost of this InlineResponse20016.
        :type: int
        """
        if remediation_cost is None:
            raise ValueError("Invalid value for `remediation_cost`, must not be `None`")

        self._remediation_cost = remediation_cost

    @property
    def name(self):
        """Gets the name of this InlineResponse20016.


        :return: The name of this InlineResponse20016.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20016.


        :param name: The name of this InlineResponse20016.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this InlineResponse20016.


        :return: The description of this InlineResponse20016.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20016.


        :param description: The description of this InlineResponse20016.
        :type: str
        """

        self._description = description

    @property
    def exec_summary(self):
        """Gets the exec_summary of this InlineResponse20016.


        :return: The exec_summary of this InlineResponse20016.
        :rtype: str
        """
        return self._exec_summary

    @exec_summary.setter
    def exec_summary(self, exec_summary):
        """Sets the exec_summary of this InlineResponse20016.


        :param exec_summary: The exec_summary of this InlineResponse20016.
        :type: str
        """

        self._exec_summary = exec_summary

    @property
    def vulnerability_detail(self):
        """Gets the vulnerability_detail of this InlineResponse20016.


        :return: The vulnerability_detail of this InlineResponse20016.
        :rtype: ApicheckersVulnerabilityDetail
        """
        return self._vulnerability_detail

    @vulnerability_detail.setter
    def vulnerability_detail(self, vulnerability_detail):
        """Sets the vulnerability_detail of this InlineResponse20016.


        :param vulnerability_detail: The vulnerability_detail of this InlineResponse20016.
        :type: ApicheckersVulnerabilityDetail
        """

        self._vulnerability_detail = vulnerability_detail

    @property
    def attacker_known_tools(self):
        """Gets the attacker_known_tools of this InlineResponse20016.


        :return: The attacker_known_tools of this InlineResponse20016.
        :rtype: list[ApicheckersAttackerKnownTools]
        """
        return self._attacker_known_tools

    @attacker_known_tools.setter
    def attacker_known_tools(self, attacker_known_tools):
        """Sets the attacker_known_tools of this InlineResponse20016.


        :param attacker_known_tools: The attacker_known_tools of this InlineResponse20016.
        :type: list[ApicheckersAttackerKnownTools]
        """

        self._attacker_known_tools = attacker_known_tools

    @property
    def resources(self):
        """Gets the resources of this InlineResponse20016.


        :return: The resources of this InlineResponse20016.
        :rtype: list[ApicheckersResources]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this InlineResponse20016.


        :param resources: The resources of this InlineResponse20016.
        :type: list[ApicheckersResources]
        """

        self._resources = resources

    @property
    def recommendation(self):
        """Gets the recommendation of this InlineResponse20016.


        :return: The recommendation of this InlineResponse20016.
        :rtype: ApicheckersRecommendation
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this InlineResponse20016.


        :param recommendation: The recommendation of this InlineResponse20016.
        :type: ApicheckersRecommendation
        """

        self._recommendation = recommendation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20016, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20016):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
