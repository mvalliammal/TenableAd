# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class InlineResponse20031(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'name': 'str',
        'deleted': 'bool',
        'directories': 'list[float]',
        'dirty': 'bool',
        'has_ever_been_committed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'deleted': 'deleted',
        'directories': 'directories',
        'dirty': 'dirty',
        'has_ever_been_committed': 'hasEverBeenCommitted'
    }

    def __init__(self, id=None, name=None, deleted=None, directories=None, dirty=None, has_ever_been_committed=None):
        """InlineResponse20031 - a model defined in Swagger"""
        self._id = None
        self._name = None
        self._deleted = None
        self._directories = None
        self._dirty = None
        self._has_ever_been_committed = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.deleted = deleted
        self.directories = directories
        self.dirty = dirty
        self.has_ever_been_committed = has_ever_been_committed

    @property
    def id(self):
        """Gets the id of this InlineResponse20031.


        :return: The id of this InlineResponse20031.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20031.


        :param id: The id of this InlineResponse20031.
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20031.


        :return: The name of this InlineResponse20031.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20031.


        :param name: The name of this InlineResponse20031.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def deleted(self):
        """Gets the deleted of this InlineResponse20031.


        :return: The deleted of this InlineResponse20031.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this InlineResponse20031.


        :param deleted: The deleted of this InlineResponse20031.
        :type: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")

        self._deleted = deleted

    @property
    def directories(self):
        """Gets the directories of this InlineResponse20031.


        :return: The directories of this InlineResponse20031.
        :rtype: list[float]
        """
        return self._directories

    @directories.setter
    def directories(self, directories):
        """Sets the directories of this InlineResponse20031.


        :param directories: The directories of this InlineResponse20031.
        :type: list[float]
        """
        if directories is None:
            raise ValueError("Invalid value for `directories`, must not be `None`")

        self._directories = directories

    @property
    def dirty(self):
        """Gets the dirty of this InlineResponse20031.


        :return: The dirty of this InlineResponse20031.
        :rtype: bool
        """
        return self._dirty

    @dirty.setter
    def dirty(self, dirty):
        """Sets the dirty of this InlineResponse20031.


        :param dirty: The dirty of this InlineResponse20031.
        :type: bool
        """
        if dirty is None:
            raise ValueError("Invalid value for `dirty`, must not be `None`")

        self._dirty = dirty

    @property
    def has_ever_been_committed(self):
        """Gets the has_ever_been_committed of this InlineResponse20031.


        :return: The has_ever_been_committed of this InlineResponse20031.
        :rtype: bool
        """
        return self._has_ever_been_committed

    @has_ever_been_committed.setter
    def has_ever_been_committed(self, has_ever_been_committed):
        """Sets the has_ever_been_committed of this InlineResponse20031.


        :param has_ever_been_committed: The has_ever_been_committed of this InlineResponse20031.
        :type: bool
        """
        if has_ever_been_committed is None:
            raise ValueError("Invalid value for `has_ever_been_committed`, must not be `None`")

        self._has_ever_been_committed = has_ever_been_committed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20031, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20031):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
