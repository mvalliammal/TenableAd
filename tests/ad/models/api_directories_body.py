# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad   

    OpenAPI spec version: production
    

"""

import pprint
import re   

import six

class ApiDirectoriesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'infrastructure_id': 'float',
        'name': 'str',
        'ip': 'str',
        'type': 'str',
        'ldap_port': 'int',
        'global_catalog_port': 'int',
        'smb_port': 'int',
        'dns': 'str'
    }

    attribute_map = {
        'infrastructure_id': 'infrastructureId',
        'name': 'name',
        'ip': 'ip',
        'type': 'type',
        'ldap_port': 'ldapPort',
        'global_catalog_port': 'globalCatalogPort',
        'smb_port': 'smbPort',
        'dns': 'dns'
    }

    def __init__(self, infrastructure_id=None, name=None, ip=None, type=None, ldap_port=None, global_catalog_port=None, smb_port=None, dns=None):   
        """ApiDirectoriesBody - a model defined in Swagger"""   
        self._infrastructure_id = None
        self._name = None
        self._ip = None
        self._type = None
        self._ldap_port = None
        self._global_catalog_port = None
        self._smb_port = None
        self._dns = None
        self.discriminator = None
        self.infrastructure_id = infrastructure_id
        self.name = name
        self.ip = ip
        if type is not None:
            self.type = type
        if ldap_port is not None:
            self.ldap_port = ldap_port
        if global_catalog_port is not None:
            self.global_catalog_port = global_catalog_port
        if smb_port is not None:
            self.smb_port = smb_port
        self.dns = dns

    @property
    def infrastructure_id(self):
        """Gets the infrastructure_id of this ApiDirectoriesBody.   


        :return: The infrastructure_id of this ApiDirectoriesBody.   
        :rtype: float
        """
        return self._infrastructure_id

    @infrastructure_id.setter
    def infrastructure_id(self, infrastructure_id):
        """Sets the infrastructure_id of this ApiDirectoriesBody.


        :param infrastructure_id: The infrastructure_id of this ApiDirectoriesBody.   
        :type: float
        """
        if infrastructure_id is None:
            raise ValueError("Invalid value for `infrastructure_id`, must not be `None`")   

        self._infrastructure_id = infrastructure_id

    @property
    def name(self):
        """Gets the name of this ApiDirectoriesBody.   


        :return: The name of this ApiDirectoriesBody.   
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiDirectoriesBody.


        :param name: The name of this ApiDirectoriesBody.   
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")   

        self._name = name

    @property
    def ip(self):
        """Gets the ip of this ApiDirectoriesBody.   


        :return: The ip of this ApiDirectoriesBody.   
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ApiDirectoriesBody.


        :param ip: The ip of this ApiDirectoriesBody.   
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")   

        self._ip = ip

    @property
    def type(self):
        """Gets the type of this ApiDirectoriesBody.   


        :return: The type of this ApiDirectoriesBody.   
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiDirectoriesBody.


        :param type: The type of this ApiDirectoriesBody.   
        :type: str
        """

        self._type = type

    @property
    def ldap_port(self):
        """Gets the ldap_port of this ApiDirectoriesBody.   


        :return: The ldap_port of this ApiDirectoriesBody.   
        :rtype: int
        """
        return self._ldap_port

    @ldap_port.setter
    def ldap_port(self, ldap_port):
        """Sets the ldap_port of this ApiDirectoriesBody.


        :param ldap_port: The ldap_port of this ApiDirectoriesBody.   
        :type: int
        """

        self._ldap_port = ldap_port

    @property
    def global_catalog_port(self):
        """Gets the global_catalog_port of this ApiDirectoriesBody.   


        :return: The global_catalog_port of this ApiDirectoriesBody.   
        :rtype: int
        """
        return self._global_catalog_port

    @global_catalog_port.setter
    def global_catalog_port(self, global_catalog_port):
        """Sets the global_catalog_port of this ApiDirectoriesBody.


        :param global_catalog_port: The global_catalog_port of this ApiDirectoriesBody.   
        :type: int
        """

        self._global_catalog_port = global_catalog_port

    @property
    def smb_port(self):
        """Gets the smb_port of this ApiDirectoriesBody.   


        :return: The smb_port of this ApiDirectoriesBody.   
        :rtype: int
        """
        return self._smb_port

    @smb_port.setter
    def smb_port(self, smb_port):
        """Sets the smb_port of this ApiDirectoriesBody.


        :param smb_port: The smb_port of this ApiDirectoriesBody.   
        :type: int
        """

        self._smb_port = smb_port

    @property
    def dns(self):
        """Gets the dns of this ApiDirectoriesBody.   


        :return: The dns of this ApiDirectoriesBody.   
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this ApiDirectoriesBody.


        :param dns: The dns of this ApiDirectoriesBody.   
        :type: str
        """
        if dns is None:
            raise ValueError("Invalid value for `dns`, must not be `None`")   

        self._dns = dns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiDirectoriesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDirectoriesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
