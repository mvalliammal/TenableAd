# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re   

import six

class InlineResponse20043(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'surname': 'str',
        'name': 'str',
        'email': 'str',
        'department': 'str',
        'biography': 'str',
        'active': 'bool',
        'picture': 'list[float]',
        'roles': 'list[float]'
    }

    attribute_map = {
        'id': 'id',
        'surname': 'surname',
        'name': 'name',
        'email': 'email',
        'department': 'department',
        'biography': 'biography',
        'active': 'active',
        'picture': 'picture',
        'roles': 'roles'
    }

    def __init__(self, id=None, surname=None, name=None, email=None, department=None, biography=None, active=None, picture=None, roles=None):
        """InlineResponse20043 - a model defined in Swagger"""
        self._id = None
        self._surname = None
        self._name = None
        self._email = None
        self._department = None
        self._biography = None
        self._active = None
        self._picture = None
        self._roles = None
        self.discriminator = None
        self.id = id
        if surname is not None:
            self.surname = surname
        self.name = name
        self.email = email
        if department is not None:
            self.department = department
        if biography is not None:
            self.biography = biography
        if active is not None:
            self.active = active
        if picture is not None:
            self.picture = picture
        self.roles = roles

    @property
    def id(self):
        """Gets the id of this InlineResponse20043.


        :return: The id of this InlineResponse20043.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20043.


        :param id: The id of this InlineResponse20043.
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def surname(self):
        """Gets the surname of this InlineResponse20043.


        :return: The surname of this InlineResponse20043.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this InlineResponse20043.


        :param surname: The surname of this InlineResponse20043.
        :type: str
        """

        self._surname = surname

    @property
    def name(self):
        """Gets the name of this InlineResponse20043.


        :return: The name of this InlineResponse20043.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20043.


        :param name: The name of this InlineResponse20043.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def email(self):
        """Gets the email of this InlineResponse20043.


        :return: The email of this InlineResponse20043.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20043.


        :param email: The email of this InlineResponse20043.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def department(self):
        """Gets the department of this InlineResponse20043.


        :return: The department of this InlineResponse20043.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this InlineResponse20043.


        :param department: The department of this InlineResponse20043.
        :type: str
        """

        self._department = department

    @property
    def biography(self):
        """Gets the biography of this InlineResponse20043.


        :return: The biography of this InlineResponse20043.
        :rtype: str
        """
        return self._biography

    @biography.setter
    def biography(self, biography):
        """Sets the biography of this InlineResponse20043.


        :param biography: The biography of this InlineResponse20043.
        :type: str
        """

        self._biography = biography

    @property
    def active(self):
        """Gets the active of this InlineResponse20043.


        :return: The active of this InlineResponse20043.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InlineResponse20043.


        :param active: The active of this InlineResponse20043.
        :type: bool
        """

        self._active = active

    @property
    def picture(self):
        """Gets the picture of this InlineResponse20043.


        :return: The picture of this InlineResponse20043.
        :rtype: list[float]
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this InlineResponse20043.


        :param picture: The picture of this InlineResponse20043.
        :type: list[float]
        """

        self._picture = picture

    @property
    def roles(self):
        """Gets the roles of this InlineResponse20043.


        :return: The roles of this InlineResponse20043.
        :rtype: list[float]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this InlineResponse20043.


        :param roles: The roles of this InlineResponse20043.
        :type: list[float]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20043, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20043):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
