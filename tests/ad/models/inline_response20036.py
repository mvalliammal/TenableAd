# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class InlineResponse20036(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'provider_login_url': 'str',
        'encryption_certificate': 'str',
        'signature_certificate': 'str',
        'service_provider_url': 'str',
        'assert_endpoint': 'str',
        'activate_created_users': 'bool',
        'allowed_groups': 'list[InlineResponse20036AllowedGroups]'
    }

    attribute_map = {
        'enabled': 'enabled',
        'provider_login_url': 'providerLoginUrl',
        'encryption_certificate': 'encryptionCertificate',
        'signature_certificate': 'signatureCertificate',
        'service_provider_url': 'serviceProviderUrl',
        'assert_endpoint': 'assertEndpoint',
        'activate_created_users': 'activateCreatedUsers',
        'allowed_groups': 'allowedGroups'
    }

    def __init__(self, enabled=None, provider_login_url=None, encryption_certificate=None, signature_certificate=None, service_provider_url=None, assert_endpoint=None, activate_created_users=None, allowed_groups=None):
        """InlineResponse20036 - a model defined in Swagger"""
        self._enabled = None
        self._provider_login_url = None
        self._encryption_certificate = None
        self._signature_certificate = None
        self._service_provider_url = None
        self._assert_endpoint = None
        self._activate_created_users = None
        self._allowed_groups = None
        self.discriminator = None
        self.enabled = enabled
        self.provider_login_url = provider_login_url
        self.encryption_certificate = encryption_certificate
        self.signature_certificate = signature_certificate
        self.service_provider_url = service_provider_url
        self.assert_endpoint = assert_endpoint
        self.activate_created_users = activate_created_users
        self.allowed_groups = allowed_groups

    @property
    def enabled(self):
        """Gets the enabled of this InlineResponse20036.


        :return: The enabled of this InlineResponse20036.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineResponse20036.


        :param enabled: The enabled of this InlineResponse20036.
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def provider_login_url(self):
        """Gets the provider_login_url of this InlineResponse20036.


        :return: The provider_login_url of this InlineResponse20036.
        :rtype: str
        """
        return self._provider_login_url

    @provider_login_url.setter
    def provider_login_url(self, provider_login_url):
        """Sets the provider_login_url of this InlineResponse20036.


        :param provider_login_url: The provider_login_url of this InlineResponse20036.
        :type: str
        """
        if provider_login_url is None:
            raise ValueError("Invalid value for `provider_login_url`, must not be `None`")

        self._provider_login_url = provider_login_url

    @property
    def encryption_certificate(self):
        """Gets the encryption_certificate of this InlineResponse20036.


        :return: The encryption_certificate of this InlineResponse20036.
        :rtype: str
        """
        return self._encryption_certificate

    @encryption_certificate.setter
    def encryption_certificate(self, encryption_certificate):
        """Sets the encryption_certificate of this InlineResponse20036.


        :param encryption_certificate: The encryption_certificate of this InlineResponse20036.
        :type: str
        """
        if encryption_certificate is None:
            raise ValueError("Invalid value for `encryption_certificate`, must not be `None`")

        self._encryption_certificate = encryption_certificate

    @property
    def signature_certificate(self):
        """Gets the signature_certificate of this InlineResponse20036.


        :return: The signature_certificate of this InlineResponse20036.
        :rtype: str
        """
        return self._signature_certificate

    @signature_certificate.setter
    def signature_certificate(self, signature_certificate):
        """Sets the signature_certificate of this InlineResponse20036.


        :param signature_certificate: The signature_certificate of this InlineResponse20036.
        :type: str
        """
        if signature_certificate is None:
            raise ValueError("Invalid value for `signature_certificate`, must not be `None`")

        self._signature_certificate = signature_certificate

    @property
    def service_provider_url(self):
        """Gets the service_provider_url of this InlineResponse20036.


        :return: The service_provider_url of this InlineResponse20036.
        :rtype: str
        """
        return self._service_provider_url

    @service_provider_url.setter
    def service_provider_url(self, service_provider_url):
        """Sets the service_provider_url of this InlineResponse20036.


        :param service_provider_url: The service_provider_url of this InlineResponse20036.
        :type: str
        """
        if service_provider_url is None:
            raise ValueError("Invalid value for `service_provider_url`, must not be `None`")

        self._service_provider_url = service_provider_url

    @property
    def assert_endpoint(self):
        """Gets the assert_endpoint of this InlineResponse20036.


        :return: The assert_endpoint of this InlineResponse20036.
        :rtype: str
        """
        return self._assert_endpoint

    @assert_endpoint.setter
    def assert_endpoint(self, assert_endpoint):
        """Sets the assert_endpoint of this InlineResponse20036.


        :param assert_endpoint: The assert_endpoint of this InlineResponse20036.
        :type: str
        """
        if assert_endpoint is None:
            raise ValueError("Invalid value for `assert_endpoint`, must not be `None`")

        self._assert_endpoint = assert_endpoint

    @property
    def activate_created_users(self):
        """Gets the activate_created_users of this InlineResponse20036.


        :return: The activate_created_users of this InlineResponse20036.
        :rtype: bool
        """
        return self._activate_created_users

    @activate_created_users.setter
    def activate_created_users(self, activate_created_users):
        """Sets the activate_created_users of this InlineResponse20036.


        :param activate_created_users: The activate_created_users of this InlineResponse20036.
        :type: bool
        """
        if activate_created_users is None:
            raise ValueError("Invalid value for `activate_created_users`, must not be `None`")

        self._activate_created_users = activate_created_users

    @property
    def allowed_groups(self):
        """Gets the allowed_groups of this InlineResponse20036.


        :return: The allowed_groups of this InlineResponse20036.
        :rtype: list[InlineResponse20036AllowedGroups]
        """
        return self._allowed_groups

    @allowed_groups.setter
    def allowed_groups(self, allowed_groups):
        """Sets the allowed_groups of this InlineResponse20036.


        :param allowed_groups: The allowed_groups of this InlineResponse20036.
        :type: list[InlineResponse20036AllowedGroups]
        """
        if allowed_groups is None:
            raise ValueError("Invalid value for `allowed_groups`, must not be `None`")

        self._allowed_groups = allowed_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20036, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20036):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
