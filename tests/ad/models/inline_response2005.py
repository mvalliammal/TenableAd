# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad   

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'deviance_id': 'int',
        'archived': 'bool',
        'read': 'bool',
        '_date': 'datetime',
        'directory_id': 'int',
        'infrastructure_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'deviance_id': 'devianceId',
        'archived': 'archived',
        'read': 'read',
        '_date': 'date',
        'directory_id': 'directoryId',
        'infrastructure_id': 'infrastructureId'
    }

    def __init__(self, id=None, deviance_id=None, archived=False, read=False, _date=None, directory_id=None, infrastructure_id=None):   
        """InlineResponse2005 - a model defined in Swagger"""   
        self._id = None
        self._deviance_id = None
        self._archived = None
        self._read = None
        self.__date = None
        self._directory_id = None
        self._infrastructure_id = None
        self.discriminator = None
        self.id = id
        self.deviance_id = deviance_id
        self.archived = archived
        self.read = read
        self._date = _date
        self.directory_id = directory_id
        self.infrastructure_id = infrastructure_id

    @property
    def id(self):
        """Gets the id of this InlineResponse2005.   


        :return: The id of this InlineResponse2005.   
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2005.


        :param id: The id of this InlineResponse2005.   
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")   

        self._id = id

    @property
    def deviance_id(self):
        """Gets the deviance_id of this InlineResponse2005.   


        :return: The deviance_id of this InlineResponse2005.   
        :rtype: int
        """
        return self._deviance_id

    @deviance_id.setter
    def deviance_id(self, deviance_id):
        """Sets the deviance_id of this InlineResponse2005.


        :param deviance_id: The deviance_id of this InlineResponse2005.   
        :type: int
        """
        if deviance_id is None:
            raise ValueError("Invalid value for `deviance_id`, must not be `None`")   

        self._deviance_id = deviance_id

    @property
    def archived(self):
        """Gets the archived of this InlineResponse2005.   


        :return: The archived of this InlineResponse2005.   
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this InlineResponse2005.


        :param archived: The archived of this InlineResponse2005.   
        :type: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")   

        self._archived = archived

    @property
    def read(self):
        """Gets the read of this InlineResponse2005.   


        :return: The read of this InlineResponse2005.   
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this InlineResponse2005.


        :param read: The read of this InlineResponse2005.   
        :type: bool
        """
        if read is None:
            raise ValueError("Invalid value for `read`, must not be `None`")   

        self._read = read

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2005.   


        :return: The _date of this InlineResponse2005.   
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2005.


        :param _date: The _date of this InlineResponse2005.   
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")   

        self.__date = _date

    @property
    def directory_id(self):
        """Gets the directory_id of this InlineResponse2005.   


        :return: The directory_id of this InlineResponse2005.   
        :rtype: int
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this InlineResponse2005.


        :param directory_id: The directory_id of this InlineResponse2005.   
        :type: int
        """
        if directory_id is None:
            raise ValueError("Invalid value for `directory_id`, must not be `None`")   

        self._directory_id = directory_id

    @property
    def infrastructure_id(self):
        """Gets the infrastructure_id of this InlineResponse2005.   


        :return: The infrastructure_id of this InlineResponse2005.   
        :rtype: int
        """
        return self._infrastructure_id

    @infrastructure_id.setter
    def infrastructure_id(self, infrastructure_id):
        """Sets the infrastructure_id of this InlineResponse2005.


        :param infrastructure_id: The infrastructure_id of this InlineResponse2005.   
        :type: int
        """
        if infrastructure_id is None:
            raise ValueError("Invalid value for `infrastructure_id`, must not be `None`")   

        self._infrastructure_id = infrastructure_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
