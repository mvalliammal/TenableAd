# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad   

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class ApicheckersRecommendation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'exec_summary': 'str',
        'detail': 'str',
        'resources': 'list[ApicheckersResources]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'exec_summary': 'execSummary',
        'detail': 'detail',
        'resources': 'resources'
    }

    def __init__(self, name=None, description=None, exec_summary=None, detail=None, resources=None):   
        """ApicheckersRecommendation - a model defined in Swagger"""   
        self._name = None
        self._description = None
        self._exec_summary = None
        self._detail = None
        self._resources = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if exec_summary is not None:
            self.exec_summary = exec_summary
        if detail is not None:
            self.detail = detail
        if resources is not None:
            self.resources = resources

    @property
    def name(self):
        """Gets the name of this ApicheckersRecommendation.   


        :return: The name of this ApicheckersRecommendation.   
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApicheckersRecommendation.


        :param name: The name of this ApicheckersRecommendation.   
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ApicheckersRecommendation.   


        :return: The description of this ApicheckersRecommendation.   
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApicheckersRecommendation.


        :param description: The description of this ApicheckersRecommendation.   
        :type: str
        """

        self._description = description

    @property
    def exec_summary(self):
        """Gets the exec_summary of this ApicheckersRecommendation.   


        :return: The exec_summary of this ApicheckersRecommendation.   
        :rtype: str
        """
        return self._exec_summary

    @exec_summary.setter
    def exec_summary(self, exec_summary):
        """Sets the exec_summary of this ApicheckersRecommendation.


        :param exec_summary: The exec_summary of this ApicheckersRecommendation.   
        :type: str
        """

        self._exec_summary = exec_summary

    @property
    def detail(self):
        """Gets the detail of this ApicheckersRecommendation.   


        :return: The detail of this ApicheckersRecommendation.   
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ApicheckersRecommendation.


        :param detail: The detail of this ApicheckersRecommendation.   
        :type: str
        """

        self._detail = detail

    @property
    def resources(self):
        """Gets the resources of this ApicheckersRecommendation.   


        :return: The resources of this ApicheckersRecommendation.   
        :rtype: list[ApicheckersResources]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ApicheckersRecommendation.


        :param resources: The resources of this ApicheckersRecommendation.   
        :type: list[ApicheckersResources]
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApicheckersRecommendation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApicheckersRecommendation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
