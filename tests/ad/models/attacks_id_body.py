# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class AttacksIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vector_attributes': 'list[ApiattacksVectorAttributes]',
        'source': 'ApiattacksSource',
        'target': 'ApiattacksSource'
    }

    attribute_map = {
        'vector_attributes': 'vectorAttributes',
        'source': 'source',
        'target': 'target'
    }

    def __init__(self, vector_attributes=None, source=None, target=None):
        """AttacksIdBody - a model defined in Swagger"""
        self._vector_attributes = None
        self._source = None
        self._target = None
        self.discriminator = None
        if vector_attributes is not None:
            self.vector_attributes = vector_attributes
        if source is not None:
            self.source = source
        if target is not None:
            self.target = target

    @property
    def vector_attributes(self):
        """Gets the vector_attributes of this AttacksIdBody.


        :return: The vector_attributes of this AttacksIdBody.
        :rtype: list[ApiattacksVectorAttributes]
        """
        return self._vector_attributes

    @vector_attributes.setter
    def vector_attributes(self, vector_attributes):
        """Sets the vector_attributes of this AttacksIdBody.


        :param vector_attributes: The vector_attributes of this AttacksIdBody.
        :type: list[ApiattacksVectorAttributes]
        """

        self._vector_attributes = vector_attributes

    @property
    def source(self):
        """Gets the source of this AttacksIdBody.


        :return: The source of this AttacksIdBody.
        :rtype: ApiattacksSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AttacksIdBody.


        :param source: The source of this AttacksIdBody.
        :type: ApiattacksSource
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this AttacksIdBody.


        :return: The target of this AttacksIdBody.
        :rtype: ApiattacksSource
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this AttacksIdBody.


        :param target: The target of this AttacksIdBody.
        :type: ApiattacksSource
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttacksIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttacksIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
