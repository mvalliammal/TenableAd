# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad   

    OpenAPI spec version: production
    

"""

import pprint
import re   

import six

class ApiSamlconfigurationBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'provider_login_url': 'str',
        'signature_certificate': 'str',
        'activate_created_users': 'bool',
        'allowed_groups': 'list[ApisamlconfigurationAllowedGroups]'
    }

    attribute_map = {
        'enabled': 'enabled',
        'provider_login_url': 'providerLoginUrl',
        'signature_certificate': 'signatureCertificate',
        'activate_created_users': 'activateCreatedUsers',
        'allowed_groups': 'allowedGroups'
    }

    def __init__(self, enabled=None, provider_login_url=None, signature_certificate=None, activate_created_users=None, allowed_groups=None):   
        """ApiSamlconfigurationBody - a model defined in Swagger"""   
        self._enabled = None
        self._provider_login_url = None
        self._signature_certificate = None
        self._activate_created_users = None
        self._allowed_groups = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if provider_login_url is not None:
            self.provider_login_url = provider_login_url
        if signature_certificate is not None:
            self.signature_certificate = signature_certificate
        if activate_created_users is not None:
            self.activate_created_users = activate_created_users
        if allowed_groups is not None:
            self.allowed_groups = allowed_groups

    @property
    def enabled(self):
        """Gets the enabled of this ApiSamlconfigurationBody.   


        :return: The enabled of this ApiSamlconfigurationBody.   
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApiSamlconfigurationBody.


        :param enabled: The enabled of this ApiSamlconfigurationBody.   
        :type: bool
        """

        self._enabled = enabled

    @property
    def provider_login_url(self):
        """Gets the provider_login_url of this ApiSamlconfigurationBody.   


        :return: The provider_login_url of this ApiSamlconfigurationBody.   
        :rtype: str
        """
        return self._provider_login_url

    @provider_login_url.setter
    def provider_login_url(self, provider_login_url):
        """Sets the provider_login_url of this ApiSamlconfigurationBody.


        :param provider_login_url: The provider_login_url of this ApiSamlconfigurationBody.   
        :type: str
        """

        self._provider_login_url = provider_login_url

    @property
    def signature_certificate(self):
        """Gets the signature_certificate of this ApiSamlconfigurationBody.   


        :return: The signature_certificate of this ApiSamlconfigurationBody.   
        :rtype: str
        """
        return self._signature_certificate

    @signature_certificate.setter
    def signature_certificate(self, signature_certificate):
        """Sets the signature_certificate of this ApiSamlconfigurationBody.


        :param signature_certificate: The signature_certificate of this ApiSamlconfigurationBody.   
        :type: str
        """

        self._signature_certificate = signature_certificate

    @property
    def activate_created_users(self):
        """Gets the activate_created_users of this ApiSamlconfigurationBody.   


        :return: The activate_created_users of this ApiSamlconfigurationBody.   
        :rtype: bool
        """
        return self._activate_created_users

    @activate_created_users.setter
    def activate_created_users(self, activate_created_users):
        """Sets the activate_created_users of this ApiSamlconfigurationBody.


        :param activate_created_users: The activate_created_users of this ApiSamlconfigurationBody.   
        :type: bool
        """

        self._activate_created_users = activate_created_users

    @property
    def allowed_groups(self):
        """Gets the allowed_groups of this ApiSamlconfigurationBody.   


        :return: The allowed_groups of this ApiSamlconfigurationBody.   
        :rtype: list[ApisamlconfigurationAllowedGroups]
        """
        return self._allowed_groups

    @allowed_groups.setter
    def allowed_groups(self, allowed_groups):
        """Sets the allowed_groups of this ApiSamlconfigurationBody.


        :param allowed_groups: The allowed_groups of this ApiSamlconfigurationBody.   
        :type: list[ApisamlconfigurationAllowedGroups]
        """

        self._allowed_groups = allowed_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiSamlconfigurationBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiSamlconfigurationBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
