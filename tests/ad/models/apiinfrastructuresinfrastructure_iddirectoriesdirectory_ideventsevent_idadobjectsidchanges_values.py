# coding: utf-8

"""
    Tenable.ad - Client API

    API to interact with Tenable.ad   

    OpenAPI spec version: production
    

"""

import pprint
import re

import six

class ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'before': 'str',
        'after': 'str',
        'current': 'str'
    }

    attribute_map = {
        'before': 'before',
        'after': 'after',
        'current': 'current'
    }

    def __init__(self, before=None, after=None, current=None):   
        """ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues - a model defined in Swagger"""   
        self._before = None
        self._after = None
        self._current = None
        self.discriminator = None
        self.before = before
        if after is not None:
            self.after = after
        if current is not None:
            self.current = current

    @property
    def before(self):
        """Gets the before of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.   


        :return: The before of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.   
        :rtype: str
        """
        return self._before

    @before.setter
    def before(self, before):
        """Sets the before of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.


        :param before: The before of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.   
        :type: str
        """
        if before is None:
            raise ValueError("Invalid value for `before`, must not be `None`")   

        self._before = before

    @property
    def after(self):
        """Gets the after of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.   


        :return: The after of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.   
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.


        :param after: The after of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.   
        :type: str
        """

        self._after = after

    @property
    def current(self):
        """Gets the current of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.   


        :return: The current of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.   
        :rtype: str
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.


        :param current: The current of this ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues.   
        :type: str
        """

        self._current = current

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiinfrastructuresinfrastructureIddirectoriesdirectoryIdeventseventIdadobjectsidchangesValues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
